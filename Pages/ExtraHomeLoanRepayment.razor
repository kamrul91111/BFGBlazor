@page "/extrahomeloanrepayment"

<div class="jumbotron" id="banner1" style="background: rgb(44,44,44);">
    <div class="row">
        <div class="col">
            <h1 style="color: rgb(255,255,255);">Extra Home Loan Repayment</h1>
            <p style="color: rgb(255,255,255);">Nullam id dolor id nibh ultricies vehicula ut id elit. Cras justo odio, dapibus ac facilisis in, egestas eget quam.</p>
        </div>
        <div class="col"><img id="im1" src="https://cdn.pixabay.com/photo/2017/07/30/23/59/garlic-2556022_960_720.jpg" style="align-content:center;" /></div>
    </div>
</div>


<div class="container">
    <div class="row">
        <div class="column">
            Initial Principal<br>
            <input @bind="Principal" />
        </div>
        <div class="column">
            Years<br>
            <input @bind="NumberOfYears" />
        </div>
        <div class="column">
            Repayment Frequency<br>
            <RadzenDropDown Placeholder="Monthly" Data="@RepaymentFrequencyDict.Keys" TValue="string" @bind-Value="@RepaymentFreqChoice" ValueProperty="RepaymentFreqChoice" Change="@(args => RepaymentFrequency(args))" />
        </div>
    </div>
    <div class="row">
        <div class="column">
            Annual Interest Rate (%)<br>
            <input @bind="InterestRate" />
        </div>
        <div class="column">
            Extra Repayment<br>
            <input @bind="ExtraRepayment" />
        </div>
        <div class="column">
            Start Date<br>
            <input @bind="StartYear" />
        </div>
    </div>
    <div class="button-row" style="margin-top:15px;">
        <button id="calculate" class="block" @onclick="Calculate">Calculate</button>
    </div>
</div>




<div class="jumbotron" id="banner1" style="background: rgb(44,44,44);">
    <div class="container" style="background: rgb(44,44,44);">
        <div class="row">
            <div class="col-sm">
                <h2 style="color: rgb(255,255,255);">InterestSaved<br>@InterestSaved</h2>
            </div>
            <div class="col-sm">
                <h2 style="color: rgb(255,255,255);">Time Saved<br>@TimeSaved</h2>
            </div>
            <div class="col-sm">
                <div class="row">
                    <h3 style="color: rgb(255,255,255);">Maximum Repayments<br>@MaximumRepayment</h3>
                </div>
                <div class="row">
                    <h3 style="color: rgb(255,255,255);">Minimum Repayments<br>@MinimumRepayment</h3>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    private double Principal { get; set; } = 300000;
    private double InterestRate { get; set; } = 2.69;
    private int NumberOfYears { get; set; } = 30;
    private int PaymentPerYears { get; set; } = 12;
    private int StartYear { get; set; } = 5;
    private int ExtraRepayment { get; set; } = 100;

    private double minimumRepayment { get; set; } = 0;
    private string MinimumRepayment { get; set; }
    private double maximumRepayment { get; set; } = 0;
    private string MaximumRepayment { get; set; }
    private double timeSaved { get; set; } = 0;
    private string TimeSaved { get; set; }
    private double interestSaved { get; set; } = 0;
    private string InterestSaved { get; set; }

    private double AmountBeforeExtraRepayment { get; set; } = 0;
    private double AmountAfterExtraRepayment { get; set; } = 0;
    private double AfterExtra { get; set; } = 0;


    private string RepaymentFreqChoice = "";

    private Dictionary<string, int> RepaymentFrequencyDict = new Dictionary<string, int>()
{{"Monthly", 12 },{"Annually", 1 },{"Weekly", 52 },{"Fortnightly", 26 }};

    private void RepaymentFrequency(object value)
    {
        foreach (KeyValuePair<string, int> element in RepaymentFrequencyDict)
        {
            if (element.Key == RepaymentFreqChoice)
            {
                PaymentPerYears = element.Value;
            }
        }
    }

    private void Calculate()
    {
        var minimumRepayment = (Principal * ((InterestRate * 0.01) / PaymentPerYears) * Math.Pow((1 + (InterestRate * 0.01) /
                PaymentPerYears), NumberOfYears * PaymentPerYears)) / (Math.Pow((1 + (InterestRate * 0.01) /
                PaymentPerYears), NumberOfYears * PaymentPerYears) - 1);

        MinimumRepayment = minimumRepayment.ToString("C");

        maximumRepayment = minimumRepayment + ExtraRepayment;
        MaximumRepayment = maximumRepayment.ToString("C");

        var AmountBeforeExtraRepayment = Principal * Math.Pow((1 + (InterestRate * 0.01) / PaymentPerYears), StartYear * PaymentPerYears) - minimumRepayment * ((Math.Pow((1 + (InterestRate * 0.01) / PaymentPerYears), StartYear * PaymentPerYears) - 1) / ((InterestRate * 0.01) / PaymentPerYears));

        var timeSaved = Math.Log10(maximumRepayment / (maximumRepayment - AmountBeforeExtraRepayment * ((InterestRate * 0.01) / PaymentPerYears))) / Math.Log10(1+ (InterestRate * 0.01) / PaymentPerYears);


        var interestSaved = ((minimumRepayment * NumberOfYears * PaymentPerYears) - Principal) - (((Principal * Math.Pow((1 + (InterestRate * 0.01) / PaymentPerYears), StartYear * PaymentPerYears)) - Principal) + ((maximumRepayment * timeSaved) - AmountBeforeExtraRepayment));
        timeSaved = NumberOfYears - ((timeSaved / PaymentPerYears) + StartYear);
        TimeSaved = (Math.Round(timeSaved, 1, MidpointRounding.ToPositiveInfinity)).ToString("C");

        InterestSaved = interestSaved.ToString("C");

    }
}
