// <auto-generated />
using System;
using BFGBlazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BFGBlazor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BFGBlazor.Data.ComparisonRateEstimate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ComparisonRate")
                        .HasColumnType("float");

                    b.Property<string>("HomeLoansId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HomeLoansId");

                    b.ToTable("ComparisonRateEstimate");
                });

            modelBuilder.Entity("BFGBlazor.Data.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeLoansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HomeLoansId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("BFGBlazor.Data.Gateway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HomeLoansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeLoansId");

                    b.ToTable("Gateway");
                });

            modelBuilder.Entity("BFGBlazor.Data.HomeLoans", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResidentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialId");

                    b.ToTable("HomeLoans");
                });

            modelBuilder.Entity("BFGBlazor.Data.Lender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeLoansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Turnaround")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HomeLoansId");

                    b.ToTable("Lender");
                });

            modelBuilder.Entity("BFGBlazor.Data.MaximumBorrowingEstimate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HomeLoansId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("MaximumBorrowing")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HomeLoansId");

                    b.ToTable("MaximumBorrowingEstimate");
                });

            modelBuilder.Entity("BFGBlazor.Data.Residential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdditionalRepayments")
                        .HasColumnType("int");

                    b.Property<double>("BaseInitialRate")
                        .HasColumnType("float");

                    b.Property<double>("BaseRevertRate")
                        .HasColumnType("float");

                    b.Property<int>("Construction")
                        .HasColumnType("int");

                    b.Property<int>("CreditImpaired")
                        .HasColumnType("int");

                    b.Property<double>("DiscountInitialRate")
                        .HasColumnType("float");

                    b.Property<double>("DiscountRevertRate")
                        .HasColumnType("float");

                    b.Property<long>("FixedTerm")
                        .HasColumnType("bigint");

                    b.Property<double>("InitialRate")
                        .HasColumnType("float");

                    b.Property<long>("IntroTerm")
                        .HasColumnType("bigint");

                    b.Property<long>("IoMaxPeriod")
                        .HasColumnType("bigint");

                    b.Property<long>("IoMinPeriod")
                        .HasColumnType("bigint");

                    b.Property<long>("Lep")
                        .HasColumnType("bigint");

                    b.Property<int>("LineOfCredit")
                        .HasColumnType("int");

                    b.Property<int>("LmiCapitalization")
                        .HasColumnType("int");

                    b.Property<double>("LmiRequiredOver")
                        .HasColumnType("float");

                    b.Property<double>("LoanMax")
                        .HasColumnType("float");

                    b.Property<double>("LoanMin")
                        .HasColumnType("float");

                    b.Property<long>("LvrMax")
                        .HasColumnType("bigint");

                    b.Property<double>("LvrMin")
                        .HasColumnType("float");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<int>("ProPack")
                        .HasColumnType("int");

                    b.Property<long>("ProPackDiscount")
                        .HasColumnType("bigint");

                    b.Property<int>("PropertyUse")
                        .HasColumnType("int");

                    b.Property<int>("RateType")
                        .HasColumnType("int");

                    b.Property<int>("RedrawFacility")
                        .HasColumnType("int");

                    b.Property<int>("RepaymentType")
                        .HasColumnType("int");

                    b.Property<double>("RevertRate")
                        .HasColumnType("float");

                    b.Property<int>("Smsf")
                        .HasColumnType("int");

                    b.Property<int>("SplitLoan")
                        .HasColumnType("int");

                    b.Property<long>("TermMax")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WhiteLabel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Residential");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BFGBlazor.Data.ComparisonRateEstimate", b =>
                {
                    b.HasOne("BFGBlazor.Data.HomeLoans", null)
                        .WithMany("ComparisonRateEstimate")
                        .HasForeignKey("HomeLoansId");
                });

            modelBuilder.Entity("BFGBlazor.Data.Fee", b =>
                {
                    b.HasOne("BFGBlazor.Data.HomeLoans", null)
                        .WithMany("Fee")
                        .HasForeignKey("HomeLoansId");
                });

            modelBuilder.Entity("BFGBlazor.Data.Gateway", b =>
                {
                    b.HasOne("BFGBlazor.Data.HomeLoans", null)
                        .WithMany("Gateway")
                        .HasForeignKey("HomeLoansId");
                });

            modelBuilder.Entity("BFGBlazor.Data.HomeLoans", b =>
                {
                    b.HasOne("BFGBlazor.Data.Residential", "Residential")
                        .WithMany()
                        .HasForeignKey("ResidentialId");
                });

            modelBuilder.Entity("BFGBlazor.Data.Lender", b =>
                {
                    b.HasOne("BFGBlazor.Data.HomeLoans", null)
                        .WithMany("Lender")
                        .HasForeignKey("HomeLoansId");
                });

            modelBuilder.Entity("BFGBlazor.Data.MaximumBorrowingEstimate", b =>
                {
                    b.HasOne("BFGBlazor.Data.HomeLoans", null)
                        .WithMany("MaximumBorrowingEstimate")
                        .HasForeignKey("HomeLoansId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
